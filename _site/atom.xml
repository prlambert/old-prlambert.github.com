<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>PR Lambert</title>
 <link href="www.prlambert.com/atom.xml" rel="self"/>
 <link href="www.prlambert.com"/>
 <updated>2012-11-21T23:32:05-08:00</updated>
 <id>www.prlambert.com</id>
 <author>
   <name>PR Lambert</name>
   <email>pr@prlambert.com</email>
 </author>

 
 <entry>
   <title>TechCrunch vs. HN: Traffic and Conversions from the front page</title>
   <link href="www.prlambert.com/2012/11/21/hn-vs-tc"/>
   <updated>2012-11-21T00:00:00-08:00</updated>
   <id>www.prlambert.com/2012/11/21/hn-vs-tc</id>
   <content type="html">
&lt;script src=&quot;http://d3js.org/d3.v2.js&quot;&gt;&lt;/script&gt;

&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;
Last Tuesday, Learndot was both featured in TechCrunch and the made the front page of Hacker News at approximately the same time. 
At 9am PST, TechCrunch posted &lt;a href=&quot;http://techcrunch.com/2012/11/13/learndot-launches-its-learning-platform-for-corporate-universities/&quot;&gt;their story&lt;/a&gt; on our launch and pivot. 
At 10am, we submitted to Hacker News the story of our 9-month rebranding process which made the front page and &lt;a href=&quot;http://hnrankings.info/4779410/&quot;&gt;stayed there for 14 hours&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Since the stories came out at nearly the same time and pointed to different pages on our site, I can easily compare the quantity and quality of traffic coming from TC vs. HN.
What I found may surprise you â€“ it certainly surprised me.
&lt;/p&gt;

&lt;h1&gt;The Vanity Metrics&lt;/h1&gt;
&lt;h3&gt;Page Views, Uniques, Pages per visit, and Time on Site&lt;/h3&gt;

&lt;div id=&quot;stacked1&quot;&gt;&lt;/div&gt;

&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;

var n = 2, // number of layers
    m = 2, // number of samples per layer
    stack = d3.layout.stack(),
    layers = stack(d3.range(n).map(function() { return [{x: 0, y: 2}, {x:1, y:0.5}]; })),
    yStackMax = d3.max(layers, function(layer) { return d3.max(layer, function(d) { return d.y0 + d.y; }); });

var width = 420,
    height = 420 

var x = d3.scale.ordinal().domain(d3.range(m)).rangeRoundBands([0, 420], .25);

var y = d3.scale.linear().domain([0, yStackMax]).range([height, 0]);

var color = d3.scale.linear().domain([0, n - 1]).range([&quot;#aad&quot;, &quot;#556&quot;]);

var xAxis = d3.svg.axis().scale(x).tickSize(1).tickPadding(6).orient(&quot;bottom&quot;);

var svg = d3.select(&quot;#stacked1&quot;).append(&quot;svg&quot;).append(&quot;g&quot;)

var layer = svg.selectAll(&quot;.layer&quot;).data(layers).enter().append(&quot;g&quot;).attr(&quot;class&quot;, &quot;layer&quot;).style(&quot;fill&quot;, function(d, i) { return color(i); });

var rect = layer.selectAll(&quot;rect&quot;).data(function(d) { return d; }).enter().append(&quot;rect&quot;)
            .attr(&quot;x&quot;, function(d) { return x(d.x); }).attr(&quot;y&quot;, height).attr(&quot;width&quot;, x.rangeBand()).attr(&quot;height&quot;, 0);

rect.transition().delay(function(d, i) { return i * 10; }).attr(&quot;y&quot;, function(d) { return y(d.y0 + d.y); })
    .attr(&quot;height&quot;, function(d) { return y(d.y0) - y(d.y0 + d.y); });

svg.append(&quot;g&quot;).attr(&quot;class&quot;, &quot;x axis&quot;).attr(&quot;transform&quot;, &quot;translate(0,&quot; + height + &quot;)&quot;).call(xAxis);

&lt;/script&gt;
</content>
 </entry>
 
 
</feed>